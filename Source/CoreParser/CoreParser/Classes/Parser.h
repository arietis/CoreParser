//
//  Parser.h
//  Parser
//
//  Created by Egor Taflanidi on 10/07/27 H.
//  Copyright (c) 27 Heisei RedMadRobot LLC. All rights reserved.
//

#import <Foundation/Foundation.h>

@protocol Fulfiller;

/**
 Сущность-парсер.
 Используется, как прародитель для остальных парсеров.

 При пересылке данных, приходящий JSON имеет стандартизированный вид.
 Корневым полем для ответа на "успешную" операцию выступает ключ "data".
 В случае ошибок возвращается JSON с ключом "error".

 Корневой парсер предоставляет функционал сканирования ответов сервиса
 на предмет распознавания искомых объектов в любой точке приходящего словаря.

 Топологическому преобразованию подвергаются любые сущности, обнаруженные в
 анализируемом словаре, сформированный список полученных объектов отдаётся в
 качетве массива.

 Предполагается, что парсер будет использоваться преимущественно посредством
 вызова метода -parseAll. В случае, если предполагается наличие единственного
 объекта в словаре-ответе API, следует использовать метод firstObject класса
 NSArray для возвращаемого массива.
 */
@interface Parser<__covariant Entity> : NSObject

NS_ASSUME_NONNULL_BEGIN

/**
 Конструктор.
 Инжектирует в парсер сущность-fulfiller.
 
 @param fulfiller - сущность, используемая методом -fulfill:from: при конструировании модельного
 объекта для заполнения полей объектного типа.
 
 @return Возвращает инициированный парсер.
 */

- (instancetype)initWithFulfiller:(nullable id<Fulfiller>)fulfiller NS_DESIGNATED_INITIALIZER;

/**
 Конструктор.

 @return Возвращает сущность-парсер.
 */
+ (instancetype)parser;

/**
 Конструктор.
 Инжектирует в парсер сущность-fulfiller.
 
 @param fulfiller - сущность, используемая методом -fulfill:from: при конструировании модельного
 объекта для заполнения полей объектного типа.
 
 @return Возвращает инициированный парсер.
 */
+ (instancetype)parserWithFulfiller:(nullable id<Fulfiller>)fulfiller;

/**
 Метод для сканирования словаря-ответа API с последующим топологическим
 преобразованием обнаруженных объектов в конкретные сущности.

 Список сущностей формирует выходной массив, возвращаемый методом.

 @param json - ответ API, словарь или массив.

 @return Возвращает массив конкретных объектов, полученных в процессе
 сканирования ответа API.
 */
- (NSArray<Entity> *)parseAll:(id)json;

/**
 Абстрактный метод для проверки, возможно ли преобразование приведенного словаря в модельный объект.

 TL;DR: Проверить словарь на mandatory fields, и сказать, можно ли из него достать модельный объект.

 Данный метод вызывается в ходе сканирования выдачи сервера. Каждая ветка JSON-словаря
 предварительно проверяется на возможность получения объекта, а затем преобразуется методом -parse:

 Предполагается, что данный метод анализирует список полей, проверяя словарь на соответствие
 необходимому минимуму информации для получения модельного объекта.

 @param json - словарь.

 @return Возвращает YES, если словарь может быть преобразован в модельный объект. Иначе NO.

 @exception Реализация по умолчанию бросает исключение абстрактного метода.
 */
- (BOOL)parsable:(NSDictionary<NSString *, NSObject *> *)json;

/**
 Абстрактный метод, возвращающий класс, экземпляр которого парсер должен создать (модельный объект).

 @return Возвращает класс конструируемой модельной сущности.

 @exception Реализация по умолчанию бросает исключение абстрактного метода.
 */
- (Class)objectClass;

/**
 Абстрактный метод, возвращающий словарь соответствия полей модельной сущности json-ключам.

 Например:

 @{ @"small_title" : @"smallTitle",
    @"description" : @"entityDescription",
    @"make_hidden" : @"makeHidden" }

 @return Возвращает mapping-словарь @{ JSON-ключ : имя поля }.

 @exception Реализация по умолчанию бросает исключение абстрактного метода.
 */
- (NSDictionary<NSString *, NSString *> *)mapping;

/**
 Абстрактный метод для проверки полей объекта на соответствие типов данных.

 Реализация метода может задействовать методы -checkNumber:, -checkString: и другие.

 @param object - модельный объект для проверки.

 @return Возвращает модельный объект, в котором поля приведены в соответствие с их типами.
 Метод не может возвращать nil. Если JSON-выдача была проверена методом -parsable: -- значит, все
 необходимые поля объекта должны быть заполнены хотя-бы значениями по умолчанию.

 @exception Реализация по умолчанию бросает исключение абстрактного метода.
 */
- (Entity)sanitize:(Entity)object;

/**
 Метод для завершения конструирования модельного объекта.

 Используется для заполнения полей объектного типа в случае, если объект в поле требуется собрать
 из того же JSON'a, либо вычитать из локальной базы данных (например, по идентификатору).

 Метод запускается после вызова -sanitize, и использует паттерн «Стратегия» с привлечением сущности
 из поля fulfiller, предоставленной парсеру.
 В случае, если fulfiller не задан, метод возвращает модельный объект без изменений.
 
 @param object - объект, распознавание которого необходимо довершить;
 @param json   - JSON, из которого следует брать данные

 @return Возвращает консистентный модельный объект.
 */
- (Entity)fulfill:(Entity)object from:(NSDictionary<NSString *, NSObject *> *)json;

/**
 С сервера может приходить объект в виде строки, а не цифры.
 Для проверки, что объект таки действительно NSNumber, а не __NSCFString,
 следует использовать данный метод.

 @param jsonValue - объект для проверки.

 @return Гарантированно возвращает NSNumber. Значение по умолчанию == @0
 */
- (NSNumber *)checkNumber:(id)jsonValue;

/**
 С сервера может приходить объект в виде цифры, а не строки.
 Для проверки, что объект таки действительно NSSString, а не NSNumber-подобный,
 следует использовать данный метод.

 @param jsonValue - объект для проверки.

 @return Гарантированно возвращает NSString. Значение по умолчанию == @""
 */
- (NSString *)checkString:(id)jsonValue;

/**
 С сервера может приходить объект в виде цифры (unixtime), цифры в миллисекундах (unixtime*10^3), а
 также в виде строки в нескольких форматах:
    yyyy-MM-dd'T'HH:mm:ss.SSSzzz
    yyyy-MM-dd'T'HH:mm:ss
    yyyy-MM-dd'T'HH:mm:ss.SSS
 
 @param jsonValue - объект для проверки.
 
 @return Гарантированно возвращает NSDate. Значение по умолчанию [NSDate date] (000:00:00:00.01.01.1970)
 */
- (NSDate *)checkDate:(id)jsonValue;

/**
 Проверить наличие полей из списка fields на наличие в словаре json.
 Метод не рекурсивный.
 
 В массив *absentFields записываются поля, которых в словаре не хватает.
 
 @param fields - поля, которые должны быть среди allKeys в словаре json; массив объектов NSString;
 @param json - словарь, в котором должны содержаться поля;
 @param absentFields - поля, которые не были найдены в словаре json.
 
 @return Возвращает YES, если все поля из массива fields были найдены в словаре json.
 */
- (BOOL)checkFieldsExist:(NSArray<NSString *> *)fields
                      in:(NSDictionary<NSString *, NSObject *> *)json
            absentFields:(NSArray<NSString *> * _Nullable * _Nullable)absentFields;

/**
 Вернуть значение по ключу.

 JSON-словарь сканируется на предмет наличия запрашиваемого ключа.
 Если ключ найден -- анализ прерывается, возвращется значение.

 @param key  - ключ для поиска в JSON'e.
 @param json - JSON, в котором производится поиск.

 @return Возвращает объект по ключу. Если объект не найден -- возвращает nil.
 */
- (nullable id)objectForKey:(NSString *)key from:(NSDictionary<NSString *, NSObject *> *)json;

/**
 Вернуть строку по ключу.

 Использует результат работы методов -objectForKey:from: и -checkString:

 @param key  - ключ для поиска в JSON'е.
 @param json - JSON, в котором производится поиск.

 @return Возвращает строку по ключу. Если строка не найдена -- возвращает nil.
 */
- (nullable NSString *)stringForKey:(NSString *)key from:(NSDictionary<NSString *, NSObject *> *)json;

/**
 Вернуть число по ключу.

 Использует результат работы методов -objectForKey:from: и -checkNumber:

 @param key  - ключ для поиска в JSON'е.
 @param json - JSON, в котором производится поиск.

 @return Возвращает число по ключу. Если число не найдено -- возвращает nil.
 */
- (nullable NSNumber *)numberForKey:(NSString *)key from:(NSDictionary<NSString *, NSObject *> *)json;

/**
 Вернуть массив строк по ключу.

 Использует результат работы методов -objectForKey:from: и -checkString:

 @param key  - ключ для поиска в JSON'e.
 @param json - JSON, в котором производится поиск.

 @return Возвращает массив строк по ключу. Если массив не найден -- возвращает <b>пустой массив</b>.
 */
- (NSArray<NSString *> *)stringsForKey:(NSString *)key from:(NSDictionary<NSString *, NSObject *> *)json;

/**
 Вернуть дату по ключу.
 Метод обрабатывает исключительно даты в формате Unix Time.

 Использует результат работы метода -numberForKey:from:, преобразовывая его в NSDate.

 @param key  - ключ для поиска в JSON'e.
 @param json - JSON, в котором производится поиск.

 @return Возвращает дату по ключу. Если дата не найдена или не может быть преобразована
 -- возвращает nil.
 */
- (nullable NSDate *)unixtimeDateForKey:(NSString *)key from:(NSDictionary<NSString *, NSObject *> *)json;

/**
 Сущность, используемая методом -fulfill:from: при конструировании модельного объекта для 
 заполнения полей объектного типа.
 */
@property (nonatomic, readwrite, strong, nullable) id<Fulfiller> fulfiller;

NS_ASSUME_NONNULL_END

@end
